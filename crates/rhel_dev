# TODO - automate install of latest version of Python3
DEV_PACKAGES=(
    "cmake3"
    "devtoolset-9-gcc-c++" 
    "devtoolset-9-gdb" 
    "git"
    "llvm-toolsetet-9.0-clang"
    "llvm-toolsetet-9.0-clang-tools-extra"
    "npm"
)

log_info "\n(movein)[I] - Updating RHEL Yum repos"
CMD="yum update"
run_as_sudo "${CMD}" 1
if [[ $? -ne 0 ]];then
    log_error "(movein)[E] - Failed updating RHEL Yum data; aborting"
    return 1
fi

INSTALL_PACKAGES=()
log_info "\n(movein)[I] - Checking RHEL dev packages"
for pkg in ${DEV_PACKAGES[@]};
do
    PKG_NAME="            - $pkg"
    if ! rpm --quiet -q $pkg > /dev/null 2>&1;then
        PKG_NAME+=" (missing; will install)"
        INSTALL_PACKAGES+=( $pkg )
    else
        PKG_NAME+=" (exists)"
    fi
    log_info "${PKG_NAME}"
done

if [[ ${#INSTALL_PACKAGES[@]} -gt 0 ]];then
   log_info "\n(movein)[I] - Installing RHEL dev packages"
   CMD="yum install -y ${INSTALL_PACKAGES[@]}"
   run_as_sudo "${CMD}" 1
   if [[ $? -ne 0 ]];then
      log_error "\n(movein)[EE] - Failed installing RHEL dev packages; aborting"
      return 1
   fi
fi

EDITOR="nvim"
EDITOR_PATH="/usr/local/sbin"
log_info "\n(movein)[I] - Installing RHEL dev editor"
if [[ ! -L "${EDITOR_PATH}/${EDITOR}" ]];then
    EDITOR_URL="https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage"
    CMD="wget -O ${EDITOR_PATH}/nvim.appimage ${EDITOR_URL}"
    run_as_sudo "${CMD}" 1
    if [[ $? -ne 0 ]];then
        log_error "\n(movein)[EE] - Failed installing RHEL dev editor; aborting"
        return 1
    fi

    CMD="ln -s ${EDITOR_PATH}/nvim.appimage ${EDITOR_PATH}/nvim;"
    run_as_sudo "${CMD}" 1
    if [[ $? -ne 0 ]];then
        log_error "\n(movein)[EE] - Failed installing RHEL dev editor; aborting"
        return 1
    fi

fi
log_info "\n(movein)[I] - Successfully installed RHEL dev packages"

inst_docker=$(prompt_user "install Docker")
if [[ ${inst_docker} -eq 1 ]];then
    # Docker repos
    log_info "            - Installing Docker repo GPG key"
    # CMD="wget -O - https://download.docker.com/linux/ubuntu/gpg | Yum-key add -"
    #run_as_sudo "${CMD}" 1
    #if [[ $? -ne 0 ]];then
    #    log_error "(movein)[E] - Failed installing GPG keys for RHEL dev repo Docker; aborting"
    #    return 1
    #fi

    log_info "            - Installing Docker repo"
    #CMD="echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable\"\
    #  > /etc/Yum/sources.list.d/docker.list"
    #run_as_sudo "${CMD}" 1
    #if [[ $? -ne 0 ]];then
    #    log_error "(movein)[E] - Failed installing RHEL dev repo Docker; aborting"
    #    return 1
    #fi
    DEV_PACKAGES+=( "docker-ce" )
fi

INSTALL_PACKAGES=()
log_info "\n(movein)[I] - Checking RHEL dev packages"
for pkg in ${DEV_PACKAGES[@]};
do
    PKG_NAME="            - $pkg"
    if ! rpm --quiet -q $pkg > /dev/null 2>&1;then
        PKG_NAME+=" (missing; will install)"
        INSTALL_PACKAGES+=( $pkg )
    else
        PKG_NAME+=" (exists)"
    fi
    log_info "${PKG_NAME}"
done

log_info "\n(movein)[I] - Installing RHEL dev packages"
CMD="yum install -y ${INSTALL_PACKAGES[@]}"
run_as_sudo "${CMD}" 1
if [[ $? -ne 0 ]];then
    log_error "\n(movein)[EE] - Failed installing RHEL dev packages; aborting"
    return 1
fi

log_info "\n(movein)[I] - Successfully installed RHEL dev packages"

if [[ $inst_docker == "1" && ! -z "$BASE_USER" ]]; then
    log_info "            - Adding ${BASE_USER} to docker group"
    CMD="usermod -a -G docker $BASE_USER"
    run_as_sudo "${CMD}" 1
    if [[ $? -ne 0 ]];then
         log_error "\n(movein)[EE] - Failed adding base user ${BASE_USER} to docker group"
         return 1
     fi
fi

#log_info "\n(movein)[I] - Activate SCL packages"
#cat <<EOF> /etc/profile.d/scl_enable.sh
#!/bin/bash
#source scl_source enable rh-git29
#EOF
#
#. /opt/rh/rh-git29/enable
